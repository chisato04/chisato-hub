The Migration Roadmap
Phase 0: Foundation & Setup

This phase is about preparing the new development environment.

    Install Node.js: Ensure you have the latest LTS version of Node.js installed, which includes npm (Node Package Manager).

    Create New Project Directory: Create a new root folder (e.g., chisato-hub).

    Initialize Monorepo: In the chisato-hub folder, run npm init -y to create a root package.json.

    Set Up Backend:

        Create the server directory.

        Inside server, run npm init -y.

        Install initial backend dependencies: npm install express cors multer.

        Move your existing modpacks/, modlists/, skins/ (just the uploads part), and metadata.json into a new server/data/ directory.

    Set Up Frontend:

        In the root chisato-hub folder, run npm create vite@latest client -- --template react. This will bootstrap a new React project in the client folder using Vite, which is incredibly fast and modern.

        cd into the client directory and run npm install.

Phase 1: Building the Node.js Backend API

The backend's only job is to provide data to the frontend via a RESTful API. It will replace all of our PHP file-reading and writing logic.

    Create the Express Server (server/server.js):

        Set up a basic Express server that listens on a port (e.g., 3001).

        Configure the cors middleware to allow requests from your React frontend.

    Modpack API Endpoints (server/routes/api.js):

        GET /api/modpacks: Read the metadata.json file and return it as JSON. This replaces the PHP data loading on index.php.

        GET /api/modpacks/:filename: Return the metadata for a single pack.

        GET /api/modpacks/:filename/modlist: Parse the associated .html modlist file (using a library like cheerio) and return the mod list as structured JSON.

    Admin API Endpoints:

        POST /api/modpacks: Use multer to handle .mrpack file uploads.

        PUT /api/modpacks/:filename: Receive JSON data to update a pack's metadata in metadata.json.

        DELETE /api/modpacks/:filename: Delete the .mrpack, associated .html, and metadata entry.

    Skins API Endpoints:

        GET /api/skins: Scan the skins/uploads directory and return a list of skin filenames.

        POST /api/skins: Use multer to handle .png skin uploads.

        DELETE /api/skins/:filename: Delete a skin file.

    Portal API Endpoint:

        GET /api/server-status: Use a Node.js Minecraft ping library (like minecraft-server-util) to ping your server and return the status as JSON. This will include caching logic.

    Static File Serving: Configure Express to serve the modpacks and skins directories as static assets so they can be downloaded directly.

Phase 2: Building the React Frontend

We will rebuild every page as a reusable React component.

    Setup Routing: Install react-router-dom (npm install react-router-dom) to handle client-side navigation between pages.

    Create Layout Components:

        Layout.jsx: A component that includes the Header and Footer.

        Header.jsx, Footer.jsx: Convert the PHP partials into React components. The theme switcher logic will now live here.

    Create Page Components (client/src/pages):

        Portal.jsx: The main landing page. It will use useEffect and fetch to call /api/server-status and display the live status.

        ModpackDepot.jsx: The main modpack browser. It will fetch all packs from /api/modpacks and manage the state for searching and filtering.

        ModpackDetails.jsx: The details page. It will get the pack's filename from the URL using the useParams hook and fetch its data from /api/modpacks/:filename and /api/modpacks/:filename/modlist. It will have a tabbed interface.

        Skins.jsx: The skins page. It will fetch from /api/skins and render a grid of SkinViewer components. It will also contain the uploader form.

        Admin.jsx: The admin panel. This will be a complex component with forms that send POST, PUT, and DELETE requests to the API using fetch.

    Create Reusable UI Components (client/src/components):

        SkinViewer.jsx: A dedicated component that wraps the skinview3d library. This is the "React way" to handle third-party libraries that manipulate the DOM.

        PackCard.jsx, Sidebar.jsx, Tab.jsx, etc.

    Styling:

        Copy the existing style.css and admin.css into the client/src/assets folder and import them.

        Refactor the CSS to use a more modern approach like CSS Modules (which Vite supports out of the box) for component-scoped styles.

Phase 3: Integration, Deployment, and Final Polish

    Connect Frontend & Backend: Ensure all fetch requests in React correctly point to the Node.js server's address (e.g., http://localhost:3001/api/...).

    Deployment on Laragon:

        Build the React App: Run npm run build in the client directory. This will create a dist folder with optimized, static HTML, CSS, and JS files.

        Configure Nginx: Set up Nginx in Laragon to serve the static files from the client/dist folder, and to act as a reverse proxy for the API, forwarding any requests to /api/* to the running Node.js server.

        Run the Node Server: Use a process manager like pm2 (npm install -g pm2) to keep your Node.js backend running continuously.

This roadmap will guide us through a complete, professional-grade rewrite of your project. It's a fantastic learning journey that will result in a much more powerful and modern application.